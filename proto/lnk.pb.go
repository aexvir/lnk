// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: lnk.proto

package proto

import (
	_ "github.com/google/gnostic/openapiv3"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LinkDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of a redirecting link. Used as the url path for redirects.
	Slug string `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	// Target url where the link is redirecting to.
	Target string `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	// Total amount of hits for this link.
	Hits uint64 `protobuf:"varint,3,opt,name=hits,proto3" json:"hits,omitempty"`
	// Daily breakdown of the hits.
	Stats []*DailyHits `protobuf:"bytes,4,rep,name=stats,proto3" json:"stats,omitempty"`
}

func (x *LinkDetails) Reset() {
	*x = LinkDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lnk_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkDetails) ProtoMessage() {}

func (x *LinkDetails) ProtoReflect() protoreflect.Message {
	mi := &file_lnk_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkDetails.ProtoReflect.Descriptor instead.
func (*LinkDetails) Descriptor() ([]byte, []int) {
	return file_lnk_proto_rawDescGZIP(), []int{0}
}

func (x *LinkDetails) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *LinkDetails) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *LinkDetails) GetHits() uint64 {
	if x != nil {
		return x.Hits
	}
	return 0
}

func (x *LinkDetails) GetStats() []*DailyHits {
	if x != nil {
		return x.Stats
	}
	return nil
}

type CreateLinkReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target url where to redirect when visiting the shortened link.
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// Custom slug to use on the shortened link instead of generating a random one.
	Slug *string `protobuf:"bytes,2,opt,name=slug,proto3,oneof" json:"slug,omitempty"`
}

func (x *CreateLinkReq) Reset() {
	*x = CreateLinkReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lnk_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLinkReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLinkReq) ProtoMessage() {}

func (x *CreateLinkReq) ProtoReflect() protoreflect.Message {
	mi := &file_lnk_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLinkReq.ProtoReflect.Descriptor instead.
func (*CreateLinkReq) Descriptor() ([]byte, []int) {
	return file_lnk_proto_rawDescGZIP(), []int{1}
}

func (x *CreateLinkReq) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *CreateLinkReq) GetSlug() string {
	if x != nil && x.Slug != nil {
		return *x.Slug
	}
	return ""
}

type LinkId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of a redirecting link. Used as the url path for redirects.
	Slug string `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
}

func (x *LinkId) Reset() {
	*x = LinkId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lnk_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkId) ProtoMessage() {}

func (x *LinkId) ProtoReflect() protoreflect.Message {
	mi := &file_lnk_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkId.ProtoReflect.Descriptor instead.
func (*LinkId) Descriptor() ([]byte, []int) {
	return file_lnk_proto_rawDescGZIP(), []int{2}
}

func (x *LinkId) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type DailyHits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ISO8601 formatted date for the day which hits are returned.
	Date string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	// Amount of hits for the link on the specified date.
	Hits uint64 `protobuf:"varint,2,opt,name=hits,proto3" json:"hits,omitempty"`
}

func (x *DailyHits) Reset() {
	*x = DailyHits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lnk_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyHits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyHits) ProtoMessage() {}

func (x *DailyHits) ProtoReflect() protoreflect.Message {
	mi := &file_lnk_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyHits.ProtoReflect.Descriptor instead.
func (*DailyHits) Descriptor() ([]byte, []int) {
	return file_lnk_proto_rawDescGZIP(), []int{3}
}

func (x *DailyHits) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *DailyHits) GetHits() uint64 {
	if x != nil {
		return x.Hits
	}
	return 0
}

type LinkList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Links []*LinkDetails `protobuf:"bytes,1,rep,name=links,proto3" json:"links,omitempty"`
}

func (x *LinkList) Reset() {
	*x = LinkList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lnk_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkList) ProtoMessage() {}

func (x *LinkList) ProtoReflect() protoreflect.Message {
	mi := &file_lnk_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkList.ProtoReflect.Descriptor instead.
func (*LinkList) Descriptor() ([]byte, []int) {
	return file_lnk_proto_rawDescGZIP(), []int{4}
}

func (x *LinkList) GetLinks() []*LinkDetails {
	if x != nil {
		return x.Links
	}
	return nil
}

var File_lnk_proto protoreflect.FileDescriptor

var file_lnk_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6c, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x6c, 0x6e, 0x6b,
	0x1a, 0x24, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xab, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x23, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0f, 0xba, 0x47, 0x0c, 0x3a, 0x0a, 0x12, 0x08, 0x27, 0x62, 0x38, 0x66, 0x38, 0x65, 0x61, 0x27,
	0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x32, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xba, 0x47, 0x17, 0x3a, 0x15, 0x12, 0x13, 0x27,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x27, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x68, 0x69,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09, 0xba, 0x47, 0x06, 0x3a, 0x04, 0x12,
	0x02, 0x34, 0x32, 0x52, 0x04, 0x68, 0x69, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x6e, 0x6b, 0x2e, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x48, 0x69, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22,
	0x76, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71,
	0x12, 0x32, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1a, 0xba, 0x47, 0x17, 0x3a, 0x15, 0x12, 0x13, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x27, 0x52, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0f, 0xba, 0x47, 0x0c, 0x3a, 0x0a, 0x12, 0x08, 0x27, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x27, 0x48, 0x00, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x22, 0x2d, 0x0a, 0x06, 0x4c, 0x69, 0x6e, 0x6b, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0f, 0xba, 0x47, 0x0c, 0x3a, 0x0a, 0x12, 0x08, 0x27, 0x62, 0x38, 0x66, 0x38, 0x65, 0x61, 0x27,
	0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x22, 0x53, 0x0a, 0x09, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x48,
	0x69, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x13, 0xba, 0x47, 0x10, 0x3a, 0x0e, 0x12, 0x0c, 0x27, 0x32, 0x30, 0x32, 0x32, 0x2d,
	0x30, 0x36, 0x2d, 0x31, 0x31, 0x27, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x04,
	0x68, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09, 0xba, 0x47, 0x06, 0x3a,
	0x04, 0x12, 0x02, 0x34, 0x32, 0x52, 0x04, 0x68, 0x69, 0x74, 0x73, 0x22, 0x32, 0x0a, 0x08, 0x4c,
	0x69, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x6e, 0x6b, 0x2e, 0x4c, 0x69, 0x6e,
	0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x32,
	0x89, 0x03, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x59, 0x0a, 0x09, 0x4c, 0x69, 0x73,
	0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0d,
	0x2e, 0x6c, 0x6e, 0x6b, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x25, 0xba,
	0x47, 0x10, 0x12, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x12, 0x5e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6e, 0x6b, 0x12, 0x12, 0x2e, 0x6c, 0x6e, 0x6b, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x6c, 0x6e, 0x6b, 0x2e, 0x4c, 0x69, 0x6e,
	0x6b, 0x49, 0x64, 0x22, 0x2f, 0xba, 0x47, 0x17, 0x12, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x20, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x6e, 0x65, 0x64, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x22, 0x0a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x3a, 0x01, 0x2a, 0x12, 0x5d, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12,
	0x0b, 0x2e, 0x6c, 0x6e, 0x6b, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x1a, 0x10, 0x2e, 0x6c,
	0x6e, 0x6b, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x33,
	0xba, 0x47, 0x17, 0x12, 0x15, 0x47, 0x65, 0x74, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13,
	0x12, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x2f, 0x7b, 0x73, 0x6c,
	0x75, 0x67, 0x7d, 0x12, 0x66, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x12, 0x0b, 0x2e, 0x6c, 0x6e, 0x6b, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x33, 0xba, 0x47, 0x17, 0x12, 0x15, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x20, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x6e, 0x65, 0x64, 0x20, 0x6c, 0x69,
	0x6e, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x2a, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x2f, 0x7b, 0x73, 0x6c, 0x75, 0x67, 0x7d, 0x42, 0x98, 0x01, 0x5a, 0x09,
	0x6c, 0x6e, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0xba, 0x47, 0x89, 0x01, 0x12, 0x86, 0x01,
	0x0a, 0x07, 0x4c, 0x6e, 0x6b, 0x20, 0x41, 0x50, 0x49, 0x12, 0x43, 0x4c, 0x6e, 0x6b, 0x20, 0x69,
	0x73, 0x20, 0x61, 0x20, 0x62, 0x61, 0x73, 0x69, 0x63, 0x20, 0x75, 0x72, 0x6c, 0x20, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x63, 0x61, 0x6e,
	0x20, 0x62, 0x65, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x20, 0x76, 0x69, 0x61, 0x20,
	0x72, 0x65, 0x73, 0x74, 0x20, 0x61, 0x70, 0x69, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x22, 0x2f,
	0x0a, 0x0e, 0x41, 0x6c, 0x65, 0x78, 0x20, 0x56, 0x69, 0x73, 0x63, 0x72, 0x65, 0x61, 0x6e, 0x75,
	0x12, 0x1d, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x65, 0x78, 0x76, 0x69, 0x72, 0x2f, 0x6c, 0x6e, 0x6b, 0x32,
	0x05, 0x30, 0x2e, 0x31, 0x2e, 0x30, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lnk_proto_rawDescOnce sync.Once
	file_lnk_proto_rawDescData = file_lnk_proto_rawDesc
)

func file_lnk_proto_rawDescGZIP() []byte {
	file_lnk_proto_rawDescOnce.Do(func() {
		file_lnk_proto_rawDescData = protoimpl.X.CompressGZIP(file_lnk_proto_rawDescData)
	})
	return file_lnk_proto_rawDescData
}

var file_lnk_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_lnk_proto_goTypes = []interface{}{
	(*LinkDetails)(nil),   // 0: lnk.LinkDetails
	(*CreateLinkReq)(nil), // 1: lnk.CreateLinkReq
	(*LinkId)(nil),        // 2: lnk.LinkId
	(*DailyHits)(nil),     // 3: lnk.DailyHits
	(*LinkList)(nil),      // 4: lnk.LinkList
	(*emptypb.Empty)(nil), // 5: google.protobuf.Empty
}
var file_lnk_proto_depIdxs = []int32{
	3, // 0: lnk.LinkDetails.stats:type_name -> lnk.DailyHits
	0, // 1: lnk.LinkList.links:type_name -> lnk.LinkDetails
	5, // 2: lnk.Links.ListLinks:input_type -> google.protobuf.Empty
	1, // 3: lnk.Links.CreateLink:input_type -> lnk.CreateLinkReq
	2, // 4: lnk.Links.GetLink:input_type -> lnk.LinkId
	2, // 5: lnk.Links.DeleteLink:input_type -> lnk.LinkId
	4, // 6: lnk.Links.ListLinks:output_type -> lnk.LinkList
	2, // 7: lnk.Links.CreateLink:output_type -> lnk.LinkId
	0, // 8: lnk.Links.GetLink:output_type -> lnk.LinkDetails
	5, // 9: lnk.Links.DeleteLink:output_type -> google.protobuf.Empty
	6, // [6:10] is the sub-list for method output_type
	2, // [2:6] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_lnk_proto_init() }
func file_lnk_proto_init() {
	if File_lnk_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lnk_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lnk_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLinkReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lnk_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lnk_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyHits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lnk_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_lnk_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lnk_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_lnk_proto_goTypes,
		DependencyIndexes: file_lnk_proto_depIdxs,
		MessageInfos:      file_lnk_proto_msgTypes,
	}.Build()
	File_lnk_proto = out.File
	file_lnk_proto_rawDesc = nil
	file_lnk_proto_goTypes = nil
	file_lnk_proto_depIdxs = nil
}
